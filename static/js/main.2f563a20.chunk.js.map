{"version":3,"sources":["Quizz/Quizz.tsx","Quizz/ListQuizz.tsx","Quizz/DashBoard.tsx","reportWebVitals.ts","index.tsx"],"names":["Quizz","props","data","index","currentIndex","onChoice","useState","numberPick","setNumberPick","check","setCheck","SQuizz","className","Number","question","answers","map","item","onClick","pre","correct","type","name","slugify","value","note","styled","div","atbm","mmt","settings","dots","infinite","arrows","speed","slidesToShow","slidesToScroll","nextArrow","prevArrow","ListQuizz","TSubject","setCurrentIndex","setup","setSetUp","refSlider","useRef","history","useHistory","useEffect","getLocal","localStorage","getItem","setupProps","JSON","parse","listData","listQuizz","subject","Object","keys","setItem","stringify","listAnswer","Array","from","length","SApp","ref","afterChange","current","ans","quizz","stateData","paser","k","splice","id","DataInfo","size","DashBoard","useForm","register","handleSubmit","watch","errors","formState","SDashBoard","onSubmit","maxSize","random","startAt","arr","r","Math","floor","indexOf","push","_","genList","required","style","color","width","defaultValue","min","max","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","basename","process","exact","path","document","getElementById"],"mappings":"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","file":"static/js/main.2f563a20.chunk.js","sourcesContent":["import styled from \"styled-components\";\nimport slugify from \"slugify\";\nimport { useState } from \"react\";\n\nexport type TQuizz = {\n  index: number;\n  id: string;\n  question: string;\n  answers: string[];\n  correct: number;\n  note?: string;\n};\nexport interface Props {\n  data: TQuizz;\n  index: number;\n  currentIndex: number;\n  onChoice: (index: number) => void; // pick one ans\n}\n\nexport default function Quizz(props: Props) {\n  const { data, index, currentIndex, onChoice } = props;\n  const [numberPick, setNumberPick] = useState(0);\n  const [check, setCheck] = useState(false);\n  // console.log(\"data\", data);\n\n  const onChange = (number: number) => {\n    const tempData = localStorage.getItem(\"dev\") || \"{}\";\n    const rs = { ...JSON.parse(tempData) };\n    rs[data.id] = { ...data, correct: number };\n    localStorage.setItem(\"dev\", JSON.stringify(rs));\n  };\n\n  return (\n    <SQuizz className={`${currentIndex === index ? \"active\" : \"hidden\"}`}>\n      {data ? (\n        <>\n          <h2 className=\"question\">\n            {Number(data.index)}. {data.question}\n          </h2>\n          <ul className=\"answers\">\n            {data.answers.map((item, index) => {\n              return (\n                <li\n                  className=\"item\"\n                  key={slugify(`${data.question}__${index}`)}\n                  onClick={() => {\n                    setNumberPick((pre) => pre + 1);\n                    if (numberPick < 1) onChoice(index);\n\n                    if (index === data.correct) setCheck(true);\n                    else setCheck(false);\n                    // onChange(index);\n                  }}\n                >\n                  <label\n                    className={`${\n                      check && data.correct === index ? \"correct\" : \"\"\n                    }`}\n                  >\n                    <input\n                      type=\"radio\"\n                      name={slugify(data.question)}\n                      value={index}\n                    />{\" \"}\n                    {/* <p className=\"item-text\">{}</p> */}\n                    {item}\n                  </label>\n                </li>\n              );\n            })}\n          </ul>\n\n          {check && data?.note && (\n            <p className=\"note\">\n              Note: <br />\n              {data?.note}\n            </p>\n          )}\n          {/* <textarea\n            style={{ width: \"500px\" }}\n            onChange={(e) => {\n              const tempData = localStorage.getItem(\"dev\") || \"{}\";\n              const rs = { ...JSON.parse(tempData) };\n              rs[data.id] = { ...data, note: e.target.value };\n              localStorage.setItem(\"dev\", JSON.stringify(rs));\n            }}\n          ></textarea>\n          <br></br>\n          {localStorage.getItem(\"dev\")\n            ? JSON.parse(localStorage.getItem(\"dev\") || \"\")[data.id] &&\n              JSON.parse(localStorage.getItem(\"dev\") || \"\")[data.id][\"correct\"]\n            : \"no\"} */}\n        </>\n      ) : (\n        \"Nothing here.\"\n      )}{\" \"}\n    </SQuizz>\n  );\n}\n\nconst SQuizz = styled.div`\n  max-width: 100%;\n  width: 100%;\n  position: relative;\n  .question {\n    padding: 0 24px;\n  }\n  .note {\n    padding: 0 24px;\n    text-transform: capitalize;\n  }\n  ul {\n    list-style: none;\n    padding-right: 12px;\n    li {\n      label {\n        &.correct {\n          color: green;\n          text-shadow: 1px 0 1px green;\n        }\n        cursor: pointer;\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n\n        input[type=\"radio\"] {\n          margin-right: 12px;\n        }\n      }\n    }\n  }\n`;\n","import Quizz, { TQuizz } from \"./Quizz\";\n\nimport { useEffect, useRef, useState } from \"react\";\nimport styled from \"styled-components\";\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\nimport Slider, { Settings } from \"react-slick\";\nimport { useHistory } from \"react-router-dom\";\nimport { TInput } from \"./DashBoard\";\n// import TotalCheck from \"./TotalCheck\";\n\n//data\nimport atbm from \"../data/atbm.json\";\nimport mmt from \"../data/mmt.json\";\n\nconst data: any = {\n  atbm: atbm,\n  mmt: mmt,\n};\n\nconst settings: Settings = {\n  dots: false,\n  infinite: false,\n  arrows: true,\n  speed: 500,\n  slidesToShow: 1,\n  slidesToScroll: 1,\n  nextArrow: <span>nextArrow</span>,\n  prevArrow: <span>prevArrow</span>,\n};\nfunction ListQuizz() {\n  const [currentIndex, setCurrentIndex] = useState<number>(0);\n  const [setup, setSetUp] = useState<TInput>();\n\n  const refSlider = useRef<any>();\n  const history = useHistory();\n\n  useEffect(() => {\n    // user setup\n    const getLocal = localStorage.getItem(\"quizz\");\n    if (getLocal) {\n      const setupProps: any = JSON.parse(getLocal);\n      // console.log(\"setupProps\", setupProps);\n\n      const listData = setupProps?.listQuizz.map(\n        (item: any) =>\n          ({ ...data[setupProps.subject] }[\n            Object.keys(data[setupProps.subject])[item - 1]\n          ])\n      );\n      setSetUp({ ...setupProps, listData: listData });\n\n      localStorage.setItem(\n        \"quizz-current\",\n        JSON.stringify({\n          ...setupProps,\n          listAnswer: Array.from({ length: setupProps.length }),\n        })\n      );\n    }\n  }, [history]);\n\n  const onChoice = (ans: number, quizz: number) => {\n    const stateData = localStorage.getItem(\"quizz-current\");\n\n    if (stateData) {\n      const paser = JSON.parse(stateData);\n      let k = paser.listAnswer;\n      k.splice(quizz, 1, ans);\n\n      localStorage.setItem(\n        \"quizz-current\",\n        JSON.stringify({\n          ...paser,\n          listAnswer: k,\n        })\n      );\n    }\n  };\n  // console.log(\"setup\", setup);\n\n  return (\n    <SApp>\n      {setup && (\n        <>\n          {currentIndex + 1 <= setup?.length\n            ? `${currentIndex + 1}/${setup?.length}`\n            : \"Total Check\"}\n          <br />\n          {setup?.listData ? (\n            <Slider\n              ref={refSlider}\n              afterChange={(current) => {\n                setCurrentIndex(current);\n              }}\n              {...settings}\n            >\n              {setup?.listData.map((item: any, index: number) => (\n                <Quizz\n                  key={item?.id}\n                  index={index}\n                  currentIndex={currentIndex}\n                  data={item as TQuizz}\n                  onChoice={(ans) => {\n                    onChoice(ans, index);\n                  }}\n                />\n              ))}\n              {/* <TotalCheck /> */}\n            </Slider>\n          ) : (\n            \"Nothing here.\"\n          )}\n          {currentIndex + 1 === setup?.length && (\n            <p>\n              Hết rồi, quay lại để kiểm tra lại hoặc reload trang để làm mới.\n            </p>\n          )}\n        </>\n      )}\n    </SApp>\n  );\n}\n\nexport default ListQuizz;\n\nconst SApp = styled.div`\n  max-width: 600px;\n  width: 100%;\n  display: block;\n  margin: 0 auto;\n`;\n","import React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useHistory } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nenum TSubject {\n  atbm = \"atbm\",\n  mmt = \"mmt\",\n}\n\nexport type TInput = {\n  subject: TSubject;\n  type: \"stt\" | \"random\";\n  length: number | string;\n  startAt?: number | string;\n  [key: string]: any;\n};\n\nconst DataInfo: {\n  [key: string]: any;\n} = {\n  atbm: {\n    size: 297,\n  },\n  mmt: {\n    size: 296,\n  },\n};\n\ntype TRandomList = {\n  size: number;\n  maxSize: number;\n  random: boolean;\n  startAt: number;\n};\n\nconst genList = ({ size, maxSize, random, startAt }: TRandomList) => {\n  if (random) {\n    let arr = [];\n    while (arr.length < size) {\n      let r = Math.floor(Math.random() * maxSize) + 1;\n      if (arr.indexOf(r) === -1) arr.push(r);\n    }\n    return arr;\n  }\n  return Array.from({ length: size }, (_, index) => startAt + index);\n};\n\nexport default function DashBoard() {\n  const {\n    register,\n    handleSubmit,\n    watch,\n    formState: { errors },\n  } = useForm();\n\n  const history = useHistory();\n\n  const onSumit = (data: TInput) => {\n    const listQuizz = genList({\n      size: Number(data.length),\n      maxSize: DataInfo[data.subject].size,\n      random: data.type === \"random\",\n      startAt: Number(data?.startAt || 1),\n    });\n\n    localStorage.setItem(\n      \"quizz\",\n      JSON.stringify({\n        ...data,\n        listQuizz: listQuizz,\n      })\n    );\n    history.push(\"/quizz\");\n  };\n\n  return (\n    <SDashBoard>\n      <div className=\"header\">\n        <h2>Ptit Quizz</h2>\n      </div>\n      <div className=\"body\">\n        <form onSubmit={handleSubmit(onSumit)}>\n          <div className=\"item\">\n            <p className=\"item__title\">Môn</p>\n            <div className=\"item__input\">\n              <label>\n                <input\n                  type=\"radio\"\n                  value={TSubject.atbm}\n                  {...register(\"subject\", { required: true })}\n                />\n                An toàn bảo mật\n              </label>\n              <label>\n                <input\n                  type=\"radio\"\n                  value={TSubject.mmt}\n                  {...register(\"subject\", { required: true })}\n                />\n                Mạng máy tính\n              </label>\n            </div>\n          </div>\n\n          {watch(\"subject\") && (\n            <>\n              <div className=\"item\">\n                <p className=\"item__title\">\n                  Số câu:{\" \"}\n                  <span style={{ color: \"red\" }}>{watch(\"length\") || 30}</span>\n                </p>\n                <div className=\"item__input\">\n                  <input\n                    style={{ width: \"100%\" }}\n                    type=\"range\"\n                    defaultValue={30}\n                    min={10}\n                    max={\n                      watch(\"subject\") ? DataInfo[watch(\"subject\")].size : 100\n                    }\n                    {...register(\"length\", { required: true })}\n                  />\n                </div>\n              </div>\n\n              <div className=\"item\">\n                <p className=\"item__title\">Hình thức</p>\n                <div className=\"item__input\">\n                  <label>\n                    <input\n                      type=\"radio\"\n                      value=\"stt\"\n                      {...register(\"type\", { required: true })}\n                    />\n                    Theo thứ tự\n                  </label>\n                  <label>\n                    <input\n                      type=\"radio\"\n                      value=\"random\"\n                      {...register(\"type\", { required: true })}\n                    />\n                    random\n                  </label>\n                </div>\n              </div>\n\n              {watch(\"type\") === \"stt\" && (\n                <div className=\"item\">\n                  <p className=\"item__title\">\n                    Bắt đầu từ câu:{\" \"}\n                    <span style={{ color: \"red\" }}>\n                      {watch(\"startAt\") || 1}\n                    </span>\n                  </p>\n                  <div className=\"item__input\">\n                    <input\n                      style={{ width: \"100%\" }}\n                      type=\"range\"\n                      defaultValue={1}\n                      min={1}\n                      max={\n                        watch(\"subject\")\n                          ? DataInfo[watch(\"subject\")].size -\n                            Number(watch(\"length\"))\n                          : 100\n                      }\n                      {...register(\"startAt\", {\n                        required: watch(\"type\") === \"stt\",\n                      })}\n                    />\n                  </div>\n                </div>\n              )}\n              {Object.keys(errors).length > 0 && (\n                <p style={{ color: \"red\" }}> Chưa chọn đủ </p>\n              )}\n              <button type=\"submit\">Bắt đầu</button>\n            </>\n          )}\n        </form>\n      </div>\n    </SDashBoard>\n  );\n}\n\nconst SDashBoard = styled.div`\n  max-width: 600px;\n  margin: 0 auto;\n  width: 100%;\n\n  .item__input {\n    display: flex;\n    justify-content: space-evenly;\n  }\n\n  p.item__title {\n    font-weight: 600;\n  }\n\n  button {\n    padding: 6px 12px;\n    display: block;\n    margin: 32px auto;\n    width: 100%;\n  }\n\n  input,\n  label,\n  button {\n    cursor: pointer;\n    user-select: none;\n    text-transform: capitalize;\n  }\n`;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport \"./index.css\";\nimport ListQuizz from \"./Quizz/ListQuizz\";\nimport DashBoard from \"./Quizz/DashBoard\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <Route exact path=\"/\">\n          <DashBoard />\n        </Route>\n        <Route path=\"/quizz\">\n          <ListQuizz />\n        </Route>\n      </Switch>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}