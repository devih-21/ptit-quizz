{"version":3,"sources":["Quizz.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Quizz","data","index","checkAnswer","currentIndex","onChoice","useState","check","setCheck","SQuizz","className","question","answers","map","item","onClick","correct","type","name","slugify","value","note","styled","div","list","size","arr","length","r","Math","floor","random","indexOf","push","ramdomList","listData","Object","keys","settings","dots","infinite","arrows","speed","slidesToShow","slidesToScroll","App","setCurrentIndex","refSlider","useRef","SApp","ref","afterChange","current","ans","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"213IAoBe,SAASA,EAAT,GAMJ,IALTC,EAKQ,EALRA,KAEAC,GAGQ,EAJRC,YAIQ,EAHRD,OACAE,EAEQ,EAFRA,aAEQ,KADRC,SAE0BC,oBAAS,IAD3B,mBACDC,EADC,KACMC,EADN,KAER,OACE,eAACC,EAAD,CAAQC,UAAS,UAAKN,IAAiBF,EAAQ,SAAW,UAA1D,UACE,qBAAIQ,UAAU,WAAd,UACGT,EAAKC,MAAQ,EADhB,KACqBD,EAAKU,YAE1B,oBAAID,UAAU,UAAd,SACGT,EAAKW,QAAQC,KAAI,SAACC,EAAMZ,GACvB,OACE,oBACEQ,UAAU,OAEVK,QAAS,WAEHb,IAAUD,EAAKe,QAASR,GAAS,GAChCA,GAAS,IANlB,SASE,wBACEE,UAAS,UACPH,GAASN,EAAKe,UAAYd,EAAQ,UAAY,IAFlD,UAKE,uBACEe,KAAK,QACLC,KAAMC,IAAQlB,EAAKU,UACnBS,MAAOlB,IACN,IACH,mBAAGQ,UAAU,YAAb,SAA0BI,QAjBvBK,IAAQ,GAAD,OAAIlB,EAAKU,SAAT,aAAsBT,UAuBzCK,IAAK,OAAIN,QAAJ,IAAIA,OAAJ,EAAIA,EAAMoB,OACd,oBAAGX,UAAU,OAAb,mBACQ,uBADR,OAEGT,QAFH,IAEGA,OAFH,EAEGA,EAAMoB,WAOjB,I,EAAMZ,EAASa,IAAOC,IAAV,0kB,uCCtDNC,EATa,SAACC,GAElB,IADA,IAAIC,EAAM,GACHA,EAAIC,OAASF,GAAM,CACxB,IAAIG,EAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UAAkB,GAClB,IAApBL,EAAIM,QAAQJ,IAAWF,EAAIO,KAAKL,GAEtC,OAAOF,EAGIQ,CAAW,IAGlBC,EAAWX,EAAKX,KAAI,SAACC,GAAD,OAAW,eAAKb,GAAOmC,OAAOC,KAAKpC,GAAMa,OAE7DwB,EAAqB,CACzBC,MAAM,EACNC,UAAU,EACVC,QAAQ,EACRC,MAAO,IACPC,aAAc,EACdC,eAAgB,GA6CHC,MA3Cf,WAAgB,IAAD,EAC2BvC,mBAAiB,GAD5C,mBACNF,EADM,KACQ0C,EADR,OAEyBxC,oBAAkB,GAF3C,mBAENH,EAFM,KAGP4C,GAHO,KAGKC,oBAGlB,OACE,eAACC,EAAD,WACG7C,EAAe,EADlB,IACsBoB,EAAKG,OACzB,cAAC,IAAD,yBACEuB,IAAKH,EACLI,YAAa,SAACC,GACZN,EAAgBM,KAEdd,GALN,aAOGH,EAAStB,KAAI,SAACC,EAAMZ,GAAP,OACZ,cAACF,EAAD,CAEEE,MAAOA,EACPE,aAAcA,EACdD,YAAaA,EACbF,KAAMa,EACNT,SAAU,SAACgD,MANb,OACOvC,QADP,IACOA,OADP,EACOA,EAAMwC,UAShBlD,EAAe,IAAMoB,EAAKG,QACzB,8JAiBFsB,EAAO3B,IAAOC,IAAV,+HC7DKgC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6c66320c.chunk.js","sourcesContent":["import styled from \"styled-components\";\nimport slugify from \"slugify\";\nimport { useState } from \"react\";\n\nexport type TQuizz = {\n  index: number;\n  id: string;\n  question: string;\n  answers: string[];\n  correct: number;\n  note?: string;\n};\nexport interface Props {\n  data: TQuizz;\n  index: number;\n  currentIndex: number;\n  checkAnswer: boolean;\n  onChoice: (index: number) => void; // pick one ans\n}\n\nexport default function Quizz({\n  data,\n  checkAnswer,\n  index,\n  currentIndex,\n  onChoice,\n}: Props) {\n  const [check, setCheck] = useState(false);\n  return (\n    <SQuizz className={`${currentIndex === index ? \"active\" : \"hidden\"}`}>\n      <h2 className=\"question\">\n        {data.index + 1}. {data.question}\n      </h2>\n      <ul className=\"answers\">\n        {data.answers.map((item, index) => {\n          return (\n            <li\n              className=\"item\"\n              key={slugify(`${data.question}__${index}`)}\n              onClick={() => {\n                // onChoice(index);\n                if (index === data.correct) setCheck(true);\n                else setCheck(false);\n              }}\n            >\n              <label\n                className={`${\n                  check && data.correct === index ? \"correct\" : \"\"\n                }`}\n              >\n                <input\n                  type=\"radio\"\n                  name={slugify(data.question)}\n                  value={index}\n                />{\" \"}\n                <p className=\"item-text\">{item}</p>\n              </label>\n            </li>\n          );\n        })}\n      </ul>\n      {check && data?.note && (\n        <p className=\"note\">\n          Note: <br />\n          {data?.note}\n        </p>\n      )}\n    </SQuizz>\n  );\n}\n\nconst SQuizz = styled.div`\n  max-width: 100%;\n  width: 100%;\n  position: relative;\n  .question {\n    padding: 0 24px;\n  }\n  .note {\n    padding: 0 24px;\n    text-transform: capitalize;\n  }\n  ul {\n    list-style: none;\n    padding-right: 12px;\n    li {\n      label {\n        &.correct {\n          color: green;\n          text-shadow: 1px 0 1px green;\n        }\n        cursor: pointer;\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n\n        input[type=\"radio\"] {\n          margin-right: 12px;\n        }\n      }\n    }\n  }\n`;\n","import Quizz, { TQuizz } from \"./Quizz\";\nimport data from \"./data/atbm.json\";\nimport { useRef, useState } from \"react\";\nimport styled from \"styled-components\";\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\nimport Slider, { Settings } from \"react-slick\";\n\nconst ramdomList = (size: number) => {\n  let arr = [];\n  while (arr.length < size) {\n    let r = Math.floor(Math.random() * 134) + 1;\n    if (arr.indexOf(r) === -1) arr.push(r);\n  }\n  return arr;\n};\n\nconst list = ramdomList(30);\n// uuid\n// index\nconst listData = list.map((item) => ({ ...data }[Object.keys(data)[item]]));\n\nconst settings: Settings = {\n  dots: false,\n  infinite: false,\n  arrows: false,\n  speed: 500,\n  slidesToShow: 1,\n  slidesToScroll: 1,\n};\nfunction App() {\n  const [currentIndex, setCurrentIndex] = useState<number>(0);\n  const [checkAnswer, setCheckAnwser] = useState<boolean>(true);\n  const refSlider = useRef<any>();\n  // console.log(\"listData\", listData);\n\n  return (\n    <SApp>\n      {currentIndex + 1}/{list.length}\n      <Slider\n        ref={refSlider}\n        afterChange={(current) => {\n          setCurrentIndex(current);\n        }}\n        {...settings}\n      >\n        {listData.map((item, index) => (\n          <Quizz\n            key={item?.id}\n            index={index}\n            currentIndex={currentIndex}\n            checkAnswer={checkAnswer}\n            data={item as TQuizz}\n            onChoice={(ans) => {}}\n          />\n        ))}\n      </Slider>\n      {currentIndex + 1 === list.length && (\n        <p>Hết rồi, quay lại để kiểm tra lại hoặc reload trang để làm mới.</p>\n      )}\n      {/* <button\n          style={{ position: \"fixed\", bottom: 0 }}\n          onClick={() => {\n            setCheckAnwser(true);\n            refSlider.current.slickGoTo(0);\n          }}\n        >\n          Tính điểm\n        </button> */}\n    </SApp>\n  );\n}\n\nexport default App;\n\nconst SApp = styled.div`\n  max-width: 600px;\n  width: 100%;\n  display: block;\n  margin: 0 auto;\n  /* padding: 32px; */\n`;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}