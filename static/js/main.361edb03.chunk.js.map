{"version":3,"sources":["Quizz.tsx","ListQuizz.tsx","DashBoard.tsx","reportWebVitals.ts","index.tsx"],"names":["Quizz","props","data","index","currentIndex","onChoice","useState","numberPick","setNumberPick","check","setCheck","SQuizz","className","Number","question","answers","map","item","onClick","pre","correct","type","name","slugify","value","note","styled","div","settings","dots","infinite","arrows","speed","slidesToShow","slidesToScroll","ListQuizz","TSubject","setCurrentIndex","setup","setSetUp","refSlider","useRef","history","useHistory","useEffect","getLocal","localStorage","getItem","setupProps","JSON","parse","listData","listQuizz","Object","keys","setItem","stringify","listAnswer","Array","from","length","SApp","ref","afterChange","current","ans","quizz","stateData","paser","k","splice","id","DataInfo","atbm","size","mmt","DashBoard","useForm","register","handleSubmit","watch","errors","formState","SDashBoard","onSubmit","maxSize","random","startAt","arr","r","Math","floor","indexOf","push","_","genList","subject","required","style","color","width","defaultValue","min","max","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","basename","process","exact","path","document","getElementById"],"mappings":"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","file":"static/js/main.361edb03.chunk.js","sourcesContent":["import styled from \"styled-components\";\nimport slugify from \"slugify\";\nimport { useState } from \"react\";\n\nexport type TQuizz = {\n  index: number;\n  id: string;\n  question: string;\n  answers: string[];\n  correct: number;\n  note?: string;\n};\nexport interface Props {\n  data: TQuizz;\n  index: number;\n  currentIndex: number;\n  onChoice: (index: number) => void; // pick one ans\n}\n\nexport default function Quizz(props: Props) {\n  const { data, index, currentIndex, onChoice } = props;\n  const [numberPick, setNumberPick] = useState(0);\n  const [check, setCheck] = useState(false);\n\n  // console.log(\"props\", props);\n\n  return (\n    <SQuizz className={`${currentIndex === index ? \"active\" : \"hidden\"}`}>\n      {data ? (\n        <>\n          <h2 className=\"question\">\n            {Number(data.index) + 1}. {data.question}\n          </h2>\n          <ul className=\"answers\">\n            {data.answers.map((item, index) => {\n              return (\n                <li\n                  className=\"item\"\n                  key={slugify(`${data.question}__${index}`)}\n                  onClick={() => {\n                    setNumberPick((pre) => pre + 1);\n                    if (numberPick < 1) onChoice(index);\n\n                    if (index === data.correct) setCheck(true);\n                    else setCheck(false);\n                  }}\n                >\n                  <label\n                    className={`${\n                      check && data.correct === index ? \"correct\" : \"\"\n                    }`}\n                  >\n                    <input\n                      type=\"radio\"\n                      name={slugify(data.question)}\n                      value={index}\n                    />{\" \"}\n                    <p className=\"item-text\">{item}</p>\n                  </label>\n                </li>\n              );\n            })}\n          </ul>\n\n          {check && data?.note && (\n            <p className=\"note\">\n              Note: <br />\n              {data?.note}\n            </p>\n          )}\n        </>\n      ) : (\n        \"chuwa cos gi\"\n      )}{\" \"}\n    </SQuizz>\n  );\n}\n\nconst SQuizz = styled.div`\n  max-width: 100%;\n  width: 100%;\n  position: relative;\n  .question {\n    padding: 0 24px;\n  }\n  .note {\n    padding: 0 24px;\n    text-transform: capitalize;\n  }\n  ul {\n    list-style: none;\n    padding-right: 12px;\n    li {\n      label {\n        &.correct {\n          color: green;\n          text-shadow: 1px 0 1px green;\n        }\n        cursor: pointer;\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n\n        input[type=\"radio\"] {\n          margin-right: 12px;\n        }\n      }\n    }\n  }\n`;\n","import Quizz, { TQuizz } from \"./Quizz\";\nimport data from \"./data/atbm.json\";\nimport { useEffect, useRef, useState } from \"react\";\nimport styled from \"styled-components\";\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\nimport Slider, { Settings } from \"react-slick\";\nimport { useHistory } from \"react-router-dom\";\nimport { TInput } from \"./DashBoard\";\n// import TotalCheck from \"./TotalCheck\";\n\nconst settings: Settings = {\n  dots: false,\n  infinite: false,\n  arrows: false,\n  speed: 500,\n  slidesToShow: 1,\n  slidesToScroll: 1,\n};\nfunction ListQuizz() {\n  const [currentIndex, setCurrentIndex] = useState<number>(0);\n  const [setup, setSetUp] = useState<TInput>();\n\n  const refSlider = useRef<any>();\n  const history = useHistory();\n\n  useEffect(() => {\n    // user setup\n    const getLocal = localStorage.getItem(\"quizz\");\n    if (getLocal) {\n      const setupProps: any = JSON.parse(getLocal);\n      const listData = setupProps?.listQuizz.map(\n        (item: any) => ({ ...data }[Object.keys(data)[item]])\n      );\n      setSetUp({ ...setupProps, listData: listData });\n\n      localStorage.setItem(\n        \"quizz-current\",\n        JSON.stringify({\n          ...setupProps,\n          listAnswer: Array.from({ length: setupProps.length }),\n        })\n      );\n    }\n  }, [history]);\n\n  const onChoice = (ans: number, quizz: number) => {\n    const stateData = localStorage.getItem(\"quizz-current\");\n\n    if (stateData) {\n      const paser = JSON.parse(stateData);\n      // console.log(\"paser\", paser);\n      let k = paser.listAnswer;\n      k.splice(quizz, 1, ans);\n\n      localStorage.setItem(\n        \"quizz-current\",\n        JSON.stringify({\n          ...paser,\n          listAnswer: k,\n        })\n      );\n    }\n  };\n  // console.log(\"setup\", setup);\n\n  return (\n    <SApp>\n      {setup && (\n        <>\n          {currentIndex + 1 <= setup?.length\n            ? `${currentIndex + 1}/${setup?.length}`\n            : \"Total Check\"}\n          <br />\n          {setup?.listData ? (\n            <Slider\n              ref={refSlider}\n              afterChange={(current) => {\n                setCurrentIndex(current);\n              }}\n              {...settings}\n            >\n              {setup?.listData.map((item: any, index: number) => (\n                <Quizz\n                  key={item?.id}\n                  index={index}\n                  currentIndex={currentIndex}\n                  data={item as TQuizz}\n                  onChoice={(ans) => {\n                    onChoice(ans, index);\n                  }}\n                />\n              ))}\n              {/* <TotalCheck /> */}\n            </Slider>\n          ) : (\n            \"Nothing here.\"\n          )}\n          {currentIndex + 1 === setup?.length && (\n            <p>\n              Hết rồi, quay lại để kiểm tra lại hoặc reload trang để làm mới.\n            </p>\n          )}\n        </>\n      )}\n    </SApp>\n  );\n}\n\nexport default ListQuizz;\n\nconst SApp = styled.div`\n  max-width: 600px;\n  width: 100%;\n  display: block;\n  margin: 0 auto;\n`;\n","import React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useHistory } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nenum TSubject {\n  atbm = \"atbm\",\n  mmt = \"mmt\",\n}\n\nexport type TInput = {\n  subject: TSubject;\n  type: \"stt\" | \"random\";\n  length: number | string;\n  startAt?: number | string;\n  [key: string]: any;\n};\n\nconst DataInfo: {\n  [key: string]: any;\n} = {\n  atbm: {\n    size: 297,\n  },\n  mmt: {\n    size: 100,\n  },\n};\n\ntype TRandomList = {\n  size: number;\n  maxSize: number;\n  random: boolean;\n  startAt: number;\n};\nconst genList = ({ size, maxSize, random, startAt }: TRandomList) => {\n  if (random) {\n    let arr = [];\n    while (arr.length < size) {\n      let r = Math.floor(Math.random() * maxSize) + 1;\n      if (arr.indexOf(r) === -1) arr.push(r);\n    }\n    return arr;\n  }\n  return Array.from({ length: size }, (_, index) => startAt + index);\n};\n\nexport default function DashBoard() {\n  const {\n    register,\n    handleSubmit,\n    watch,\n    formState: { errors },\n  } = useForm();\n\n  const history = useHistory();\n\n  const onSumit = (data: TInput) => {\n    const listQuizz = genList({\n      size: Number(data.length),\n      maxSize: DataInfo[data.subject].size,\n      random: data.type === \"random\",\n      startAt: Number(data?.startAt || 0),\n    });\n\n    // console.log(\"data\", data, listQuizz);\n    localStorage.setItem(\n      \"quizz\",\n      JSON.stringify({\n        ...data,\n        listQuizz: listQuizz,\n      })\n    );\n    history.push(\"/quizz\");\n  };\n  // console.log(\"process.env.PUBLIC_URL\", process.env.PUBLIC_URL);\n\n  return (\n    <SDashBoard>\n      <div className=\"header\">\n        <h2>Ptit Quizz</h2>\n      </div>\n      <div className=\"body\">\n        <form onSubmit={handleSubmit(onSumit)}>\n          <div className=\"item\">\n            <p className=\"item__title\">Môn</p>\n            <div className=\"item__input\">\n              <label>\n                <input\n                  type=\"radio\"\n                  value={TSubject.atbm}\n                  {...register(\"subject\", { required: true })}\n                />\n                An toàn bảo mật\n              </label>\n              <label>\n                <input\n                  type=\"radio\"\n                  value={TSubject.mmt}\n                  {...register(\"subject\", { required: true })}\n                />\n                Mạng máy tính\n              </label>\n            </div>\n          </div>\n\n          {watch(\"subject\") && (\n            <>\n              <div className=\"item\">\n                <p className=\"item__title\">\n                  Số câu:\n                  <span style={{ color: \"red\" }}>{watch(\"length\") || 30}</span>\n                </p>\n                <div className=\"item__input\">\n                  <input\n                    style={{ width: \"100%\" }}\n                    type=\"range\"\n                    defaultValue={30}\n                    min={10}\n                    max={\n                      watch(\"subject\") ? DataInfo[watch(\"subject\")].size : 100\n                    }\n                    {...register(\"length\", { required: true })}\n                  />\n                </div>\n              </div>\n\n              <div className=\"item\">\n                <p className=\"item__title\">Hình thức</p>\n                <div className=\"item__input\">\n                  <label>\n                    <input\n                      type=\"radio\"\n                      value=\"stt\"\n                      {...register(\"type\", { required: true })}\n                    />\n                    Theo thứ tự\n                  </label>\n                  <label>\n                    <input\n                      type=\"radio\"\n                      value=\"random\"\n                      {...register(\"type\", { required: true })}\n                    />\n                    random\n                  </label>\n                </div>\n              </div>\n\n              {watch(\"type\") === \"stt\" && (\n                <div className=\"item\">\n                  <p className=\"item__title\">\n                    Bắt đầu từ câu:\n                    <span style={{ color: \"red\" }}>\n                      {watch(\"startAt\") || 0}\n                    </span>\n                  </p>\n                  <div className=\"item__input\">\n                    <input\n                      style={{ width: \"100%\" }}\n                      type=\"range\"\n                      defaultValue={0}\n                      min={0}\n                      max={\n                        watch(\"subject\")\n                          ? DataInfo[watch(\"subject\")].size -\n                            Number(watch(\"length\"))\n                          : 100\n                      }\n                      {...register(\"startAt\", {\n                        required: watch(\"type\") === \"stt\",\n                      })}\n                    />\n                  </div>\n                </div>\n              )}\n              {Object.keys(errors).length > 0 && (\n                <p style={{ color: \"red\" }}> Chưa chọn đủ </p>\n              )}\n              <button type=\"submit\">Bắt đầu</button>\n            </>\n          )}\n        </form>\n      </div>\n    </SDashBoard>\n  );\n}\n\nconst SDashBoard = styled.div`\n  max-width: 600px;\n  margin: 0 auto;\n  width: 100%;\n\n  .item__input {\n    display: flex;\n    justify-content: space-evenly;\n  }\n\n  p.item__title {\n    font-weight: 600;\n  }\n\n  button {\n    padding: 6px 12px;\n    display: block;\n    margin: 32px auto;\n    width: 100%;\n  }\n\n  input,\n  label,\n  button {\n    cursor: pointer;\n    user-select: none;\n    text-transform: capitalize;\n  }\n`;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport \"./index.css\";\nimport ListQuizz from \"./ListQuizz\";\nimport DashBoard from \"./DashBoard\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <Route exact path=\"/\">\n          <DashBoard />\n        </Route>\n        <Route path=\"/quizz\">\n          <ListQuizz />\n        </Route>\n      </Switch>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}